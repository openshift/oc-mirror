// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -source=./interface.go -destination=./mock/interface_generated.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	types "github.com/containers/image/v5/types"
	digest "github.com/opencontainers/go-digest"
	v2alpha1 "github.com/openshift/oc-mirror/v2/internal/pkg/api/v2alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockManifestInterface is a mock of ManifestInterface interface.
type MockManifestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockManifestInterfaceMockRecorder
	isgomock struct{}
}

// MockManifestInterfaceMockRecorder is the mock recorder for MockManifestInterface.
type MockManifestInterfaceMockRecorder struct {
	mock *MockManifestInterface
}

// NewMockManifestInterface creates a new mock instance.
func NewMockManifestInterface(ctrl *gomock.Controller) *MockManifestInterface {
	mock := &MockManifestInterface{ctrl: ctrl}
	mock.recorder = &MockManifestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManifestInterface) EXPECT() *MockManifestInterfaceMockRecorder {
	return m.recorder
}

// ConvertOCIIndexToSingleManifest mocks base method.
func (m *MockManifestInterface) ConvertOCIIndexToSingleManifest(dir string, oci *v2alpha1.OCISchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertOCIIndexToSingleManifest", dir, oci)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConvertOCIIndexToSingleManifest indicates an expected call of ConvertOCIIndexToSingleManifest.
func (mr *MockManifestInterfaceMockRecorder) ConvertOCIIndexToSingleManifest(dir, oci any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertOCIIndexToSingleManifest", reflect.TypeOf((*MockManifestInterface)(nil).ConvertOCIIndexToSingleManifest), dir, oci)
}

// ExtractOCILayers mocks base method.
func (m *MockManifestInterface) ExtractOCILayers(filePath, toPath, label string, oci *v2alpha1.OCISchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractOCILayers", filePath, toPath, label, oci)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtractOCILayers indicates an expected call of ExtractOCILayers.
func (mr *MockManifestInterfaceMockRecorder) ExtractOCILayers(filePath, toPath, label, oci any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractOCILayers", reflect.TypeOf((*MockManifestInterface)(nil).ExtractOCILayers), filePath, toPath, label, oci)
}

// GetOCIImageIndex mocks base method.
func (m *MockManifestInterface) GetOCIImageIndex(dir string) (*v2alpha1.OCISchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOCIImageIndex", dir)
	ret0, _ := ret[0].(*v2alpha1.OCISchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOCIImageIndex indicates an expected call of GetOCIImageIndex.
func (mr *MockManifestInterfaceMockRecorder) GetOCIImageIndex(dir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOCIImageIndex", reflect.TypeOf((*MockManifestInterface)(nil).GetOCIImageIndex), dir)
}

// GetOCIImageManifest mocks base method.
func (m *MockManifestInterface) GetOCIImageManifest(file string) (*v2alpha1.OCISchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOCIImageManifest", file)
	ret0, _ := ret[0].(*v2alpha1.OCISchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOCIImageManifest indicates an expected call of GetOCIImageManifest.
func (mr *MockManifestInterfaceMockRecorder) GetOCIImageManifest(file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOCIImageManifest", reflect.TypeOf((*MockManifestInterface)(nil).GetOCIImageManifest), file)
}

// GetOperatorConfig mocks base method.
func (m *MockManifestInterface) GetOperatorConfig(file string) (*v2alpha1.OperatorConfigSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorConfig", file)
	ret0, _ := ret[0].(*v2alpha1.OperatorConfigSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatorConfig indicates an expected call of GetOperatorConfig.
func (mr *MockManifestInterfaceMockRecorder) GetOperatorConfig(file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorConfig", reflect.TypeOf((*MockManifestInterface)(nil).GetOperatorConfig), file)
}

// GetReleaseSchema mocks base method.
func (m *MockManifestInterface) GetReleaseSchema(filePath string) ([]v2alpha1.RelatedImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseSchema", filePath)
	ret0, _ := ret[0].([]v2alpha1.RelatedImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReleaseSchema indicates an expected call of GetReleaseSchema.
func (mr *MockManifestInterfaceMockRecorder) GetReleaseSchema(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseSchema", reflect.TypeOf((*MockManifestInterface)(nil).GetReleaseSchema), filePath)
}

// ImageDigest mocks base method.
func (m *MockManifestInterface) ImageDigest(ctx context.Context, sourceCtx *types.SystemContext, imgRef string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageDigest", ctx, sourceCtx, imgRef)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageDigest indicates an expected call of ImageDigest.
func (mr *MockManifestInterfaceMockRecorder) ImageDigest(ctx, sourceCtx, imgRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageDigest", reflect.TypeOf((*MockManifestInterface)(nil).ImageDigest), ctx, sourceCtx, imgRef)
}

// ImageManifest mocks base method.
func (m *MockManifestInterface) ImageManifest(ctx context.Context, sourceCtx *types.SystemContext, imgRef string, instanceDigest *digest.Digest) ([]byte, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageManifest", ctx, sourceCtx, imgRef, instanceDigest)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ImageManifest indicates an expected call of ImageManifest.
func (mr *MockManifestInterfaceMockRecorder) ImageManifest(ctx, sourceCtx, imgRef, instanceDigest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageManifest", reflect.TypeOf((*MockManifestInterface)(nil).ImageManifest), ctx, sourceCtx, imgRef, instanceDigest)
}
