// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -source=./interface.go -destination=./mock/interface_generated.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v2alpha1 "github.com/openshift/oc-mirror/v2/internal/pkg/api/v2alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockCollectorInterface is a mock of CollectorInterface interface.
type MockCollectorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCollectorInterfaceMockRecorder
	isgomock struct{}
}

// MockCollectorInterfaceMockRecorder is the mock recorder for MockCollectorInterface.
type MockCollectorInterfaceMockRecorder struct {
	mock *MockCollectorInterface
}

// NewMockCollectorInterface creates a new mock instance.
func NewMockCollectorInterface(ctrl *gomock.Controller) *MockCollectorInterface {
	mock := &MockCollectorInterface{ctrl: ctrl}
	mock.recorder = &MockCollectorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectorInterface) EXPECT() *MockCollectorInterfaceMockRecorder {
	return m.recorder
}

// AdditionalImagesCollector mocks base method.
func (m *MockCollectorInterface) AdditionalImagesCollector(ctx context.Context) ([]v2alpha1.CopyImageSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdditionalImagesCollector", ctx)
	ret0, _ := ret[0].([]v2alpha1.CopyImageSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdditionalImagesCollector indicates an expected call of AdditionalImagesCollector.
func (mr *MockCollectorInterfaceMockRecorder) AdditionalImagesCollector(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdditionalImagesCollector", reflect.TypeOf((*MockCollectorInterface)(nil).AdditionalImagesCollector), ctx)
}
