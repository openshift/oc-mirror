//go:build real

package main

import (
	"encoding/base64"
	"fmt"
	"log"
	"net/http"
	"os"
)

var servercert string = `LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR6ekNDQXJlZ0F3SUJBZ0lVTjM3SFJFaE1u
TkRIYlVrQUlGT0w5VTcyUEtVd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1pqRUxNQWtHQTFVRUJoTUNW
Vk14RURBT0JnTlZCQWdNQjFKaGJHVnBaMmd4RlRBVEJnTlZCQWNNREVSbApabUYxYkhRZ1EybDBl
VEVOTUFzR0ExVUVDZ3dFUVdOdFpURUxNQWtHQTFVRUN3d0NUa0V4RWpBUUJnTlZCQU1NCkNXeHZZ
MkZzYUc5emREQWVGdzB5TXpBeE1qVXhOakUyTkRsYUZ3MHpNekF4TWpJeE5qRTJORGxhTUdZeEN6
QUoKQmdOVkJBWVRBbFZUTVJBd0RnWURWUVFJREFkU1lXeGxhV2RvTVJVd0V3WURWUVFIREF4RVpX
WmhkV3gwSUVOcApkSGt4RFRBTEJnTlZCQW9NQkVGamJXVXhDekFKQmdOVkJBc01BazVCTVJJd0VB
WURWUVFEREFsc2IyTmhiR2h2CmMzUXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dn
RUtBb0lCQVFDc3dsSEdMSEhKenM5Zko1RWwKaWZIT01tMXhUd0N6YTJRK1BCVXZ4QkN2WUtDTGQx
YTJ1dWxqZnpZUjF3VTNSRU9BMjhNaTBaRHFNeGpFbldKQwp0Wis3V2hrSlluejI1cG5XTk4vTUlM
Z1FUZC9ReVpKbXpCcnBtUGlzQTFNcFc0dU04aThrdlNXbXZUWVJxWlNFCkV1bmtxOE96OTUyR0NG
VGNFQTg1YkNySlpibktPSkZlZWNockk5NmFqV0xQRUVJenlhRnhZWW4vRmxxNVJrVUUKdnBkaGRa
Y3h5ZFV3anZ5UGxPRkRRM2JPbHVqQ1pSR2xMVFBTakNtYXhCRlRkK3BiUzU4WXd5SEUya1dZR3pI
VwpjZTNSUGVma0V5UFhQMGxBbjVSV1FLN1RtaEcxeU54QjFRNnhhZjRUMUkvMXR6ZC9WMzRSS3Uw
WFN3dmtRM3JSClV6eDNBZ01CQUFHamRUQnpNQjBHQTFVZERnUVdCQlI1SVFtdnliVGUrL2krUU4r
WjhLWW03WmNZNnpBZkJnTlYKSFNNRUdEQVdnQlI1SVFtdnliVGUrL2krUU4rWjhLWW03WmNZNnpB
UEJnTlZIUk1CQWY4RUJUQURBUUgvTUNBRwpBMVVkRVFRWk1CZUNGV3h2WTJGc2FHOXpkQzVzYjJO
aGJHUnZiV0ZwYmpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DCkFRRUFhbEplNWdsWmJPcjQxYy9CM2VQ
Sm5jZ1RhV0V4b0d0RWdBYnVXYmh3WlNuNnVJTnQwUGVEVDQzdHBuaGoKekQ3cFk5blE4aUFJRk42
bUUySWEzUlhJaE5pejliZjY3UnRsU25yUHNWb1hsZHRXVFBId2ppSFJDd1dtcVBKcQp6cE9xcUdJ
ZitOa0FFb25VY0dPS2JwL1FDNTFqL05wVFFlZXhlZTllS2Z1bmlleXdlU1RodFg0S2x3Tm5WQW1H
CmRsSnBhc3ZMUjVoTi9CQmltZXNUYnpsbnc1ZUc3VWVxc0RONEU1U1JqMy9DYnBPNUZyNlFtRFcv
M0h6eDRscHYKVGhaczFHMmp4TVFSS0dxaWRmenQvdHFXVFhqamtSZ3I4Nkg4d1NKdW9oQTdwc1RO
WkdEY2pickF0TzdadHRIcwpkLzZlWEdDSUlNbTZpM1ZNUkkvQkdzQ08yZz09Ci0tLS0tRU5EIENF
UlRJRklDQVRFLS0tLS0K`

var serverkey = `LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZB
QVNDQktjd2dnU2pBZ0VBQW9JQkFRQ3N3bEhHTEhISnpzOWYKSjVFbGlmSE9NbTF4VHdDemEyUStQ
QlV2eEJDdllLQ0xkMWEydXVsamZ6WVIxd1UzUkVPQTI4TWkwWkRxTXhqRQpuV0pDdForN1doa0pZ
bnoyNXBuV05OL01JTGdRVGQvUXlaSm16QnJwbVBpc0ExTXBXNHVNOGk4a3ZTV212VFlSCnFaU0VF
dW5rcThPejk1MkdDRlRjRUE4NWJDckpaYm5LT0pGZWVjaHJJOTZhaldMUEVFSXp5YUZ4WVluL0Zs
cTUKUmtVRXZwZGhkWmN4eWRVd2p2eVBsT0ZEUTNiT2x1akNaUkdsTFRQU2pDbWF4QkZUZCtwYlM1
OFl3eUhFMmtXWQpHekhXY2UzUlBlZmtFeVBYUDBsQW41UldRSzdUbWhHMXlOeEIxUTZ4YWY0VDFJ
LzF0emQvVjM0Ukt1MFhTd3ZrClEzclJVengzQWdNQkFBRUNnZ0VBRUlqZXE4RjRPSkQzTHd2SjdC
WmFVdHBudUNjUUVad1BNWmV0alc5T0M0TUwKaXAybTZvRlVNaVlzUmlQV3gzWGNvaG9tZ0pBZk54
TWg1VHVNK29hSW5iVmZYUk1VazhyNVlWT1pNZC9WemhXdAovTDAyS21tUmo5Y0l3ZW5salRsS1Qz
aWtnM2NwQWQ3dExGNlhMTmJrbFBMTm5jMXV3YlBOYjJ5SUVINW1UL1VvCnIvWmc3aGgxUit6U0NU
UGJKd3Z6aHFpcUNUSjIya0o4b3pxbmJkTi9maDBDZllpZHB2RVpIMW5reHptZUJ2WjYKcnhtMVlH
c01oL21BWWRnNjNPRHZ2VlRaUllGam9tZ1d4dlVadXM5UWczZW5HaTV1cEZzeCttcEl3U1cyNE8x
QwpERWV1WGlKNnE3c3ZVam1heWhVVnIxSnp5SkVGbFhNNmRJTnZyYWxWSVFLQmdRRGYxVWhoaUl4
YStOT2N0SngrCmxwVXdzUktDUFlSN1J2dlFrNytWQmZqTFZyL0RrVkFDRm1hMW0vQklxazYzZStC
YUt3ZTZzL1hPa0JFRXVVWlcKZkI0VnhOVmNvWStXM3pVYnRhdU5ET3l2TTFwWS9LVWNQZ2xaQ0lv
YkQvYUErd1VyWVlDK3R6VjhTQTlmSW00TApKZDJ1enhzaDBSL1l5aE1Ma1JJL3FRWEhZUUtCZ1FE
RmxndU9jUUJVT3BSQTZ2SHE4RGVLU3RyWWhSOVF4QmEvCmlxdGZPaGp3ejFPL3BhZWhOTEl1a1dl
OUR5SnluSldpb0pLRkhmaVEzaFJjdUNuUFNMemhBUitSaHNrT09MRE8KNlFoTUg5dldOSldhTjB5
eFR0Q3EzNGQ2WmxSTXR5RTNVanRRZ1E4VXg4S3hLM0NPNTgvcFc2VWt3NWQ5bElHbQovdVc0RlE4
SzF3S0JnUURVeTI2NWt0aGtzRVIxcVZ0U0daU1NLdlYrcmo5aDk3VDBzVklrdWYyeVNyR2FtbTVt
CjNhY2RwcmVFVGF6eVVTbVViMjQwdUZ2SzJqbmp0TVJDK2xLYnZYcGVTeFk0aDlGMG0zMFJacVVw
VnZmZ3U2ZTQKdHQycU1DMGoxMFF4a1BOMEw0ajNSelBwQ0pUY2k5MzBhVFpjdDNhQzZzNk5DbWVh
eW50LzNBK3JZUUtCZ0Q2VApxczFPRktDWWZPT2loVU8zR0ovLzNSZTk4WkVPeVhXWVlYWWpYRXJJ
SHVvUGVPdWhXTjFPeCtBa3J2QkZqMDZXCk5GRmNrS0N3OVJuNGFhVndrQUZpN2JDVlU0L2hmSDNM
YUFsVC9iZjFwM3ZVRDhJSUNDWlY3UDVpOGtmcHArZHgKYjcrcllDOWdwTlNmd1dKQklLUHpsblh5
VEVSRmlGcHZXQ25ZNFk2NUFvR0FPcFk5VkpSQlgwM2k2czBUb0RXRAptcnFQL2M5UXczRWt4VkFJ
VnVsUzhVbDRscjk4S1ArNzVlK2JnM1YzaytQNHZVUFdBYU1NWHdaZHkvRm1VQkIxCmNXcmZlcFoy
U1hiekNPcFRhNU1ZbGZlMjArNWJ4SnhvbzRnMmNHVEljZjNDc1c4VGY2a3dDbi9VMWNsMzFaSHkK
K0hBZ0Iwb0JGOXJzdmVRNnRsdDdYUXc9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K`

// func decodeAndWriteCerts
func decodeAndWriteCerts() {
	rawdecodedtext, err := base64.StdEncoding.DecodeString(servercert)
	if err != nil {
		os.Exit(1)
	}
	err = os.WriteFile("test/e2e/graph/server.crt", rawdecodedtext, 0644)
	if err != nil {
		fmt.Println("ERROR ", err)
		os.Exit(1)
	}
	rawdecodedtext, err = base64.StdEncoding.DecodeString(serverkey)
	if err != nil {
		os.Exit(1)
	}
	os.WriteFile("test/e2e/graph/server.key", rawdecodedtext, 0644)
	if err != nil {
		fmt.Println("ERROR ", err)
		os.Exit(1)
	}
}

// startHttpServer - private function
func startHttpServer() {

	decodeAndWriteCerts()

	mux := http.NewServeMux()
	// used for customized cincinnatti graph search
	mux.HandleFunc("/graph", func(w http.ResponseWriter, req *http.Request) {
		renderGraph(w, req)
	})

	http.Handle("/", mux)

	if err := http.ListenAndServeTLS(":3443", "test/e2e/graph/server.crt", "test/e2e/graph/server.key", nil); err != nil {
		log.Println("Error: HttpsServer: ListenAndServeTLS() : ", err)
		os.Exit(1)
	}
}

func renderGraph(w http.ResponseWriter, req *http.Request) {
	data, err := os.ReadFile("test/e2e/graph/cincinnatti.json")
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		fmt.Fprintf(w, "%s", "{\"statusCode\":\"500\", \"message\":\"failed to read graph data\"}")
	}
	fmt.Fprintf(w, "%s", string(data))
}

// main - needs no explanation :)
func main() {
	log.Println("Starting tls server on port 3443")
	startHttpServer()
}
